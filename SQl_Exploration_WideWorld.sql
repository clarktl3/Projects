/*=============================================
Author:      Tyrell Clark
Create date: Nov 2023
Last Modified: Nov 2023
Description: In this project I will do some exploration on the sample 'WideWorldImporters' SQL Server Database

About WideWorldImporters:
        Wide World Importers (WWI) is a wholesale novelty goods importer and distributor operating from the San Francisco bay area.
As a wholesaler, WWI's customers are mostly companies who resell to individuals. WWI sells to retail customers across the United States including specialty stores, supermarkets, computing stores, tourist attraction shops, and some individuals. WWI also sells to other wholesalers via a network of agents who promote the products on WWI's behalf. While all of WWI's customers are currently based in the United States, the company is intending to push for expansion into other countries/regions.
WWI buys goods from suppliers including novelty and toy manufacturers, and other novelty wholesalers. They stock the goods in their WWI warehouse and reorder from suppliers as needed to fulfill customer orders. They also purchase large volumes of packaging materials, and sell these in smaller quantities as a convenience for the customers.

*Note the latest date in this data is '2016-05-31' we will assume this as the 'Current Date'
=============================================*/



------------Retrieve the names and contact details of the top 10 customers who have made the highest total sales.
SELECT 
    TOP 10
    c.CustomerID,
    c.CustomerName,
    c.PhoneNumber,
    SUM(ct.TransactionAmount) AS TotalSales
FROM 
    Sales.CustomerTransactions ct
    JOIN Sales.Customers c ON ct.CustomerID = c.CustomerID
GROUP BY 
    c.CustomerID, c.CustomerName, c.PhoneNumber
ORDER BY 
    TotalSales DESC;

------------List all orders along with the customer name, ordered product, and quantity for each order.
SELECT 
    o.OrderID,
    c.CustomerName,
    od.StockItemID,
    si.StockItemName,
    od.Quantity
FROM 
    Sales.Orders o
    JOIN Sales.Customers c ON o.CustomerID = c.CustomerID
    JOIN Sales.OrderLines od ON o.OrderID = od.OrderID
    JOIN Warehouse.StockItems si ON od.StockItemID = si.StockItemID;
------------Find the products that have been ordered more than the average quantity in any single order.
WITH AverageOrderQuantity AS (
    SELECT AVG(Quantity) AS AvgOrderQuantity
    FROM Sales.OrderLines
)

SELECT 
    ol.StockItemID,
    si.StockItemName,
    AVG(ol.Quantity) AS AvgQuantityPerOrder
FROM 
    Sales.OrderLines ol
    JOIN Warehouse.StockItems si ON ol.StockItemID = si.StockItemID
    CROSS JOIN AverageOrderQuantity
GROUP BY 
    ol.StockItemID, si.StockItemName
HAVING 
    AVG(ol.Quantity) > (SELECT AvgOrderQuantity FROM AverageOrderQuantity);

------------Calculate the total revenue generated by each product category for the last quarter.
SELECT 
    sg.StockGroupName,
    SUM(ol.Quantity * ol.UnitPrice ) AS TotalRevenue
FROM 
    Sales.OrderLines ol
    JOIN Warehouse.StockItems si ON ol.StockItemID = si.StockItemID
    JOIN Warehouse.StockItemStockGroups sisg ON si.StockItemID = sisg.StockItemID
    JOIN Warehouse.StockGroups sg ON sisg.StockGroupID = sg.StockGroupID
    JOIN Sales.Orders o ON ol.OrderID = o.OrderID
WHERE 
    o.OrderDate >= DATEADD(QUARTER, DATEDIFF(QUARTER, 0, '2016-05-31') - 1, 0) -- Beginning of last quarter
    AND o.OrderDate < DATEADD(DAY, -1, DATEADD(QUARTER, DATEDIFF(QUARTER, 0, '2016-05-31'), 0)) -- End of last quarter
GROUP BY 
    sg.StockGroupName
ORDER BY 
    TotalRevenue DESC;

------------Determine the average order value for orders placed on weekdays and weekends separately.
SELECT 
    CASE 
        WHEN DATEPART(WEEKDAY, o.OrderDate) IN (1, 7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS OrderDayType,
    AVG(so.TotalAmount) AS AvgOrderValue
FROM 
    Sales.Orders o
    JOIN (
        SELECT 
            OrderID,
            SUM(Quantity * UnitPrice ) AS TotalAmount
        FROM 
            Sales.OrderLines
        GROUP BY 
            OrderID
    ) so ON o.OrderID = so.OrderID
GROUP BY 
    CASE 
        WHEN DATEPART(WEEKDAY, o.OrderDate) IN (1, 7) THEN 'Weekend'
        ELSE 'Weekday'
    END;
------------Rank customers based on their total purchase amount, and display the top 5 customers.
WITH RankedCustomers AS (
    SELECT 
        c.CustomerID,
        c.CustomerName,
        SUM(ol.Quantity * ol.UnitPrice) AS TotalPurchaseAmount,
        RANK() OVER (ORDER BY SUM(ol.Quantity * ol.UnitPrice) DESC) AS PurchaseRank
    FROM 
        Sales.OrderLines ol
        JOIN Sales.Orders o ON ol.OrderID = o.OrderID
        JOIN Sales.Customers c ON o.CustomerID = c.CustomerID
    GROUP BY 
        c.CustomerID, c.CustomerName
)

SELECT 
    CustomerID,
    CustomerName,
    TotalPurchaseAmount
FROM 
    RankedCustomers
WHERE 
    PurchaseRank <= 5;
------------Calculate the running total of sales for each product within its category.
WITH ProductSales AS (
    SELECT 
        si.StockItemID,
        si.StockItemName,
        ca.StockGroupID,
        ca.StockGroupName,
        SUM(ol.Quantity * ol.UnitPrice) AS TotalSales
    FROM 
        Sales.OrderLines ol
        JOIN Warehouse.StockItems si ON ol.StockItemID = si.StockItemID
        JOIN Warehouse.StockItemStockGroups sg ON si.StockItemID = sg.StockItemID
        JOIN Warehouse.StockGroups ca ON sg.StockGroupID = ca.StockGroupID
    GROUP BY 
        si.StockItemID, si.StockItemName, ca.StockGroupID, ca.StockGroupName
),

RunningTotal AS (
    SELECT 
        StockItemID,
        StockItemName,
        StockGroupID,
        StockGroupName,
        TotalSales,
        SUM(TotalSales) OVER (PARTITION BY StockGroupID ORDER BY TotalSales DESC) AS RunningTotal
    FROM 
        ProductSales
)

SELECT 
    StockItemID,
    StockItemName,
    StockGroupID,
    StockGroupName,
    TotalSales,
    RunningTotal
FROM 
    RunningTotal
ORDER BY 
    StockGroupID, TotalSales DESC;

------------Retrieve a list of customers who have not made any purchases along with their contact details.
SELECT 
    c.CustomerID,
    c.CustomerName,
    c.PhoneNumber
FROM 
    Sales.Customers c
WHERE 
    c.CustomerID NOT IN (
        SELECT DISTINCT o.CustomerID
        FROM Sales.Orders o
    );
------------Create a pivot table showing the total quantity sold for each product in the last three months.
SELECT 
    StockItemID,
    StockItemName,
    [3 Months Ago],
    [2 Months Ago],
    [Last Month]
FROM (
    SELECT 
        si.StockItemID,
        si.StockItemName,
        DATENAME(MONTH, o.OrderDate) AS OrderMonth,
        SUM(ol.Quantity) AS TotalQuantity
    FROM 
        Sales.OrderLines ol
        JOIN Warehouse.StockItems si ON ol.StockItemID = si.StockItemID
        JOIN Sales.Orders o ON ol.OrderID = o.OrderID
    WHERE 
        o.OrderDate >= DATEADD(MONTH, -3, '2016-05-31')
    GROUP BY 
        si.StockItemID, si.StockItemName, DATENAME(MONTH, o.OrderDate)
) AS SourceData
PIVOT (
    SUM(TotalQuantity) FOR OrderMonth IN ([3 Months Ago], [2 Months Ago], [Last Month])
) AS PivotTable;
------------Update the prices of products in a specific category by applying a percentage increase.
DECLARE @CategoryID INT = 1; -- Replace with the desired category ID
DECLARE @PercentageIncrease DECIMAL(5, 2) = 0.1; -- Replace with the desired percentage increase

UPDATE Warehouse.StockItems
SET UnitPrice = UnitPrice * (1 + @PercentageIncrease)
WHERE StockItemID IN (
    SELECT si.StockItemID
    FROM Warehouse.StockItems si
    JOIN Warehouse.StockItemStockGroups sg ON si.StockItemID = sg.StockItemID
    WHERE sg.StockGroupID = @CategoryID
);
------------Use a CTE to find the average time it takes for each supplier to ship their products.
WITH SupplierAverageShipTime AS (
    SELECT 
        s.SupplierID,
        s.SupplierName,
        AVG(DATEDIFF(DAY, o.OrderDate, o.ExpectedDeliveryDate)) AS AvgShipTimeDays
    FROM 
        Purchasing.Suppliers s
        JOIN Warehouse.StockItems si ON s.SupplierID = si.SupplierID
        JOIN Sales.OrderLines ol ON si.StockItemID = ol.StockItemID
        JOIN Sales.Orders o ON ol.OrderID = o.OrderID
    GROUP BY 
        s.SupplierID, s.SupplierName
)

SELECT 
    SupplierID,
    SupplierName,
    AvgShipTimeDays
FROM 
    SupplierAverageShipTime;
------------Identify orders with missing customer information and provide a count of such orders.
SELECT 
    o.OrderID,
    o.OrderDate,
    COUNT(*) AS MissingCustomerCount
FROM 
    Sales.Orders o
WHERE 
    o.CustomerID IS NULL
    OR NOT EXISTS (
        SELECT 1
        FROM Sales.Customers c
        WHERE c.CustomerID = o.CustomerID
    )
GROUP BY 
    o.OrderID, o.OrderDate;

------------Retrieve the historical prices of a specific product, showing changes over time.
DECLARE @ProductID INT = 1; -- Replace with the desired product ID

SELECT 
    si.StockItemID,
    si.StockItemName,
    pip.PurchaseDate,
    pip.SupplierID,
    pip.SupplierName,
    pip.PurchasePrice,
    ROW_NUMBER() OVER (PARTITION BY si.StockItemID ORDER BY pip.PurchaseDate DESC) AS RowNum
FROM 
    Warehouse.StockItems si
    JOIN Purchasing.PurchaseOrderLines pol ON si.StockItemID = pol.StockItemID
    JOIN Purchasing.PurchaseOrders po ON pol.PurchaseOrderID = po.PurchaseOrderID
    JOIN Purchasing.Suppliers s ON po.SupplierID = s.SupplierID
    CROSS APPLY (
        SELECT 
            po.PurchaseOrderID,
            po.OrderDate AS PurchaseDate,
            s.SupplierID,
            s.SupplierName,
            pol.PurchasePrice
        FROM 
            Purchasing.PurchaseOrderLines pol
            JOIN Purchasing.PurchaseOrders po ON pol.PurchaseOrderID = po.PurchaseOrderID
            JOIN Purchasing.Suppliers s ON po.SupplierID = s.SupplierID
        WHERE 
            si.StockItemID = @ProductID
    ) AS pip
WHERE 
    si.StockItemID = @ProductID
ORDER BY 
    si.StockItemID, pip.PurchaseDate DESC, RowNum;

------------For each customer, find the total sales, the average order value, and the number of orders placed.
SELECT 
    c.CustomerID,
    c.CustomerName,
    COUNT(DISTINCT o.OrderID) AS NumberOfOrders,
    SUM(ol.Quantity * ol.UnitPrice) AS TotalSales,
    AVG(ol.Quantity * ol.UnitPrice) AS AvgOrderValue
FROM 
    Sales.Orders o
    JOIN Sales.Customers c ON o.CustomerID = c.CustomerID
    JOIN Sales.OrderLines ol ON o.OrderID = ol.OrderID
GROUP BY 
    c.CustomerID, c.CustomerName
ORDER BY 
    TotalSales DESC;

------------List the top 5 products that have experienced the highest percentage increase in price compared to the previous month.
WITH ProductPriceChanges AS (
    SELECT 
        si.StockItemID,
        si.StockItemName,
        LAG(si.RecommendedRetailPrice) OVER (PARTITION BY si.StockItemID ORDER BY p.PurchaseDate) AS PreviousMonthPrice,
        MAX(si.RecommendedRetailPrice) OVER (PARTITION BY si.StockItemID) AS CurrentMonthPrice
    FROM 
        Warehouse.StockItems si
        JOIN Purchasing.PurchaseOrderLines pol ON si.StockItemID = pol.StockItemID
        JOIN Purchasing.PurchaseOrders p ON pol.PurchaseOrderID = p.PurchaseOrderID
    WHERE 
        p.PurchaseDate >= DATEADD(MONTH, -1, '2016-05-31')
)

SELECT 
    StockItemID,
    StockItemName,
    PreviousMonthPrice,
    CurrentMonthPrice,
    ((CurrentMonthPrice - PreviousMonthPrice) / PreviousMonthPrice) * 100 AS PriceIncreasePercentage
FROM 
    ProductPriceChanges
ORDER BY 
    PriceIncreasePercentage DESC
OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY;
